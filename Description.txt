https://www.youtube.com/embed/playlist?list=PLL-k0Ff5RfqW8dF5-othi-imF6g48tUj5
https://github.com/aspnet

ASP Web NET.Core 3.1
[14]

~~~~~~~~~
[3]
Program.cs
запуск сервера проекта, инициализация хоста
IIS как прокси сервер, затем запрос идет на Kestrel

~~~~~~~~~
token=654321
консоль, host 8080

~~~~~~~~~
[4]
Startup.cs

~~~~~~~~~
[5]
Middleware
промежуточное ПО
Startup.cs - Configure 

компоненты обработки запроса, определяют конвейер
встроенные компоненты Middleware включены в мета пакет Microsoft.AspNetCore.All 

компоненты middleware можно определять как отдельные методы, например как анонимные методы или лямбда-выражения в методе Run,
либо можно определять как отдельные классы

для встраивания собственных компонентов в middlware можно использовать различные методы:
Use, Map, MapWhen, UseWhen, Run, UseMiddleware

метод Configure выполняется только один раз при старте приложения
? x счетчик запросов например 

~~~~~~~~~
[6]
метод Run
самый простой способ добавления компонентов в конвейер запросов
компонент Middleware можно вынести в отдельный метод, соответствующий Task Delegate
Run терминальный компонент, обрабатывается только первый запрос, run должен быть последним

~~~~~~~~~
[7]
метод Use
у метода две версии, вторая - extention: middleware: function task
компонент из метода use терминальный, 
но можно определеить компоненты, которые будут передавать управление обработкой запроса следующим в конвеере компонентам

~~~~~~~~~
[8]
метод Map
сопоставление путей запроса с определенным делегатом, 
который будет обрабатывать запрос по этому пути
если строка запроса не соответсвует путям, обработка запроса будет выполняться послдедним компонентов в конвеере (run)
методы map могут быть вложенными

~~~~~~~~~
[9]
определение компонентов Middleware
в виде отдельных классов
class TokenMiddleware
необходимо вставить компонент middleware в конвейер обработки запроса
UseMiddleware

методы расширений для IApplicationBuilder
можно использовать UseToken

передача параметров в компонент Middleware

~~~~~~~~~
[10]
создание конвеера из компонентов Middleware
class RoutingMiddleware

компонент необходимо встроить в конвейер
Startup.cs - Configure - UseMiddleware

+ еще компоненент аутентификации по токену
class AuthenticationMiddleware

+ компонент обработки ошибок, информация для пользователя, не статусным кодом
class ErrorHandlerMiddleware
пост обработка результатов выполнения других компонентов => в конвейер на первое место
каждый компонент, кроме тернального, может обрабатывать запрос два раза => можно передать здесь выполнение следующему компоненту

выполнение обработки запроса переходит к предыдущему компоненту
ErrorHandlerMiddleware - AuthenticationMiddleware - RoutingMiddleware - AuthenticationMiddleware - ErrorHandlerMiddleware
происходит промотр статусных кодов, передача сообщения со статусным кодом

~~~~~~~~~
[11]
статические файлы
NuGet Microsoft.AspNetCore.StaticFiles

Startup.cs - Configure - UseStaticFiles
размещается в начале конвейера обработки запросов
если запрос придет к статическому файлу,
то компонент получит запрос, обработает, ответ пользователю,
иначе к следующему компоненту

по умолчанию для статических файлов wwwroot
new file hello.html

можно использовать любую папку
folder Static - file content.html
Program.cs при создании хоста вызвать метод для использования папки статичесских файлов UseWebRoot

файлы по-умолчанию
Startup.cs - Configure - UseDefaultFiles
используются для обработки запрос а в корне веб приложения (имена default.html index.html, или переопределение )

wwroot - index.html

~~~~~~~~~
[12]
Dependency Injection & Services
Внедрение зависимостей и сервисы
.NET Core - встроенная система зависимостей - сервисов
сервисы - объект, который выполняет некоторую задачу и может выполняться в различных частях приложения за счет внедрения зависимостей
Startup.cs - ConfigureServices

сервисы могут быть встроенными, а также из добавленных пакетов

Services - interfase IMessageSender
Services - class TimeService

~~~~~~~~~
[13]
получение сервисов и Dependency Injection

- передача сервиса через параметры Configure Startup

- передача зависимостей в конструктор любого класса, кроме Startup

- получение сервиса из контекста context.RequestServices (если не добавлен сервис GetService - null, GetRequiredService вызовет исключение)

- передача зависимостей через метод invoke, компоненты middleware, определенны с помощью классов 

~~~~~~~~~
[14]
жизненный цикл зависимостей

модели
Transient - при каждом получении объекта сервиса создается отдельный экземпляр сервиса
Scoped - один экземпляр сервиса на весь запрос
Singleton - один экземпляр сервиса на весь период жизни приложения

Services - interface ICounter